name: Reusable CI Pipeline - Testing, Coverage and Linting

on:
  workflow_call:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-html flake8 playwright
          python -m playwright install --with-deps chromium
          pip list

      - name: Run linting
        run: flake8 app/ --count --show-source --statistics
        shell: bash

      - name: Run tests with coverage and HTML reports
        run: |
          mkdir -p htmltest
          pytest --cov=app \
                 --cov-report=term-missing \
                 --cov-report=html \
                 --cov-report=xml \
                 --cov-fail-under=90 \
                 --html=htmltest/report.html \
                 --self-contained-html tests
        shell: bash

      - name: Verify coverage report directory
        run: |
          if [ ! -d "htmlcov" ]; then
            echo "Error: htmlcov/ directory not found. Ensure tests pass and --cov-report=html is enabled."
            exit 1
          fi

      - name: Verify test report directory
        run: |
          if [ ! -d "htmltest" ]; then
            echo "Error: htmltest/ directory not found. Ensure tests pass and --html is enabled."
            exit 1
          fi

      - name: Convert HTML reports to PDF
        run: |
          mkdir -p pdfreports
          cat > convert_reports.py << 'EOF'
          import asyncio
          from playwright.async_api import async_playwright
          import os

          async def html_to_pdf(html_path, pdf_path):
              async with async_playwright() as p:
                  browser = await p.chromium.launch()
                  page = await browser.new_page()
                  absolute_path = os.path.abspath(html_path)
                  await page.goto(f"file://{absolute_path}", wait_until="networkidle")
                  await page.wait_for_timeout(1000)
                  await page.pdf(path=pdf_path, print_background=True, format="A4")
                  await browser.close()

          async def main():
              await html_to_pdf("htmltest/report.html", "pdfreports/test_report.pdf")
              await html_to_pdf("htmlcov/index.html", "pdfreports/coverage_report.pdf")

          if __name__ == "__main__":
              asyncio.run(main())
          EOF
          python convert_reports.py

      - name: Upload PDF reports
        uses: actions/upload-artifact@v4
        with:
          name: pdf-reports
          path: pdfreports/
          compression-level: 0

      - name: Upload HTML reports (as backup)
        uses: actions/upload-artifact@v4
        with:
          name: html-reports
          path: |
            htmltest/
            htmlcov/
          compression-level: 0
