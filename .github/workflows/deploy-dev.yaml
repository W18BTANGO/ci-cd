name: Reusable Deploy to Amazon ECS (Dev)

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      ecr-repository:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      ecs-task-definition:
        required: true
        type: string
      container-name:
        required: true
        type: string
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-session-token:
        required: true

jobs:
  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Verify AWS Credentials
      run: |
        aws sts get-caller-identity

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ inputs.aws-region }}
        aws-access-key-id: ${{ secrets.aws-access-key-id }}
        aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
        aws-session-token: ${{ secrets.aws-session-token }}


    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        aws ecr get-login-password --region ${{ inputs.aws-region }} | \
        docker login --username AWS --password-stdin ${{ secrets.aws-access-key-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ secrets.aws-access-key-id }}.dkr.ecr.${{ inputs.aws-region }}.amazonaws.com
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ inputs.ecr-repository }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ inputs.ecs-task-definition }}
        container-name: ${{ inputs.container-name }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.ecs-service }}
        cluster: ${{ inputs.ecs-cluster }}
        wait-for-service-stability: true
